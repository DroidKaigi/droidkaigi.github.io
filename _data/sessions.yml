- title: "つかえるGradleプロジェクトの作り方"
  speaker: "zaki50"
  time: "25分"
  topic: "開発環境・ツール"
  topic_other:
  description: |-
    Android アプリケーションの開発環境が Eclipse から Android Studio に移り変わりつつあります。Android Studio ではプロジェクトの構成管理に Gradle を採用しているため、Gradle の機能を使うことでさまざまなカスタマイズを行うことが出来ます。

    Android Studio が作成するプロジェクトはビルドに必要な最低限の記述しか行われていません。そこで、生成直後のプロジェクトでは足りない機能をとりあげ、Gradle プロジェクトのカスタマイズとしてどのような記述を行えば良いかという具体例を紹介したいです。

- title: "初学者に嬉しいAndroid開発環境"
  speaker: "hkusu"
  time: "25分"
  topic: "開発環境・ツール"
  topic_other:
  description: |-
    初学者に嬉しい、実際に使ってみて良かった、開発を楽するためのツールについて紹介します。
    ・Android Studio プラグイン
    ・Butter Knife
    ・EventBus
    ・ステートマシンの自動生成
    ・Android Studio で自動生成されるソース類の紹介
    ・GenyMotion
    ・Android Studio の便利機能
    ・おすすめMVC構成
    ・初学者にオススメする書籍
    駆け足で２５分で！

- title: "新言語KotlinでAndroidプログラミング"
  speaker: "長澤 太郎 (@ngsw_taro)"
  time: "25分"
  topic: "開発環境・ツール"
  topic_other:
  description: |-
    ■趣旨
    あのJake Whartonも注目するAndroidのSwiftと名高いKotlinを紹介します！
    ゴールは、Kotlinという新しい言語を使って楽しく簡単にAndroidアプリ開発したい！と思ってもらうこと。

    ■対象者
    Android: 初心者〜
    Java: 中級者〜

    ■目次
    ・Kotlinの概要
    Kotlinは2011年にIntelliJ IDEAなどで有名なJetBrains社により発表されたプログラミング言語です。
    Java仮想マシンやJavaScriptに加えて、Androidがターゲットです。
    誕生のモチベーションは、Javaや既存のJVM言語(Groovy, Scalaなど)に満足できないことです。
    Kotlinの特徴を列挙すると、シンプル、安全、Javaとの完全な相互運用性、Javaと同等以上のコンパイル速度、オブジェクト指向などです。
    シンプル: 文法や記法そのものが簡潔です。また、高階関数やラムダ式などによるモダンなスタイルのコーディングが可能です。
    安全: 型安全性がJavaよりも強いです。Null安全と呼ばれるNPEが起こらないユニークな仕組みをサポートしています。
    Javaとの完全な相互運用性: 既存のJavaコードをKotlinから呼び出すことも、その逆もできます。
    Javaと同等以上のコンパイル速度: JetBrainsが掲げているKotlinの目標のひとつです。Scalaを意識していると思われます。
    オブジェクト指向: Javaプログラマには親しみやすいです。トレイト、プロパティ、委譲などJavaにはない多くの機能があります。

    ・文法、機能
    Javaとの対比をしたり、Androidにおける例を交えながら文法と言語機能を紹介します。
    特に関数、クラス、Null安全を詳しく取り挙げます。
    各トピックの主なキーワード↓
    関数: 高階関数やラムダ式、メソッド参照、関数型
    クラス: 継承・トレイト、委譲、プロパティ、拡張メソッド、ジェネリクス
    Null安全: Null許容型(Nullable)、非Null型(NotNull)、PlatformType

    ・ライブラリの活用
    Kotlin + Android用ライブラリの紹介をします。
    KotterKnife: Kotlin版ButterKnife。作者はJake。ViewInjectionライブラリ。
    RxJava(RxAndroid): RxのJVM実装。ことりんとの相性はいいかも。

- title: "僕らのデータ同期プラクティス"
  speaker: "Nkzn"
  time: "25分"
  topic: "開発環境・ツール"
  topic_other:
  description: |-
    ユーザーがどんな場所にアプリを持っていこうと、私達はそれを制止できません。自分たちのWebサービスを携帯網もWi-Fiもない場所でも使ってほしいと思ったとき、私たち開発者には何ができるでしょうか。
    GmailアプリやEvernoteアプリのように、オフライン時に閲覧・作成・編集されたデータをサーバーと同期させるための仕組みが、Androidには用意されています。
    ただ、サーバーと同期する際のアルゴリズムについては開発者任せです。
    自社サービスでの実例を挙げながら、サーバー側も視野に入れて同期アルゴリズム作成の観点を紹介します。

- title: "Android と SELinux"
  speaker: "androidsola"
  time: "25分"
  topic: "Android の最新動向"
  topic_other:
  description: |-
    Android 4.4 から有効化された SELinux は Android 5.0 で適用範囲が拡大されています。

    Android 開発者は SELinux を知らないと適切なセキュリティポリシーの設定が出来ず、予期しない動作やセキュリティの甘い Android を作ってしまう事に繋がる可能性があります。
    過去、Linux のインストール直後に無効化される事が多かった SELinux ですが、Android 開発においては無効化は通用せず、真剣に SELinux に向き合う時が来てしまいました。

    しかし Android + SELinux に関する情報は多くありません。（特に日本語の情報）
    そこで、これまで Android をカスタマイズしてきた経験の中で遭遇した内容や、調べてきた内容を共有したいと考えています。

    対象は Android を使用した製品の開発者や Android のカスタマイズを趣味等で行っている開発者を想定しています。
    Android 5.0 からは一般の Android アプリケーションに対してもセキュリティポリシーの定義が有効になっているので、アプリケーション開発者も知っていると良いかもしれません。

- title: "ARTのメモリ管理"
  speaker: "@haru067"
  time: "25分"
  topic: "Android の最新動向"
  topic_other:
  description: |-
    Android 5.0では，ARTという新しいランタイムがDalvik VMに替わって搭載されました．
    ARTはDalvik VMと比べてメモリ管理で多くの変更があり，マルチコアCPUに向けた並列GCや，並行メモリ割当てに対応した独自のメモリアロケータ，世代別GCなどが新たに実装されています．

    本セッションでは，ARTの登場によってメモリ管理がどう変わるのかを説明し，
    メモリ管理が変わることでアプリケーション開発者にどのような影響があるのか，
    例えば，
    「どういったタイミングでどのようなGCが発生するのか」
    「その際のGCによるアプリケーションの停止時間はどの程度なのか」
    「デフラグなど，メモリの利用効率はどうなのか」
    といったことについて話したいと思います．

    対象者については，メモリ管理に関する基礎知識があると理解し易いと思いますが，
    知識が無い人でも問題ないよう説明したいと考えています．

- title: "進化するランタイムART"
  speaker: "kmt-t"
  time: "50分"
  topic: "Android の最新動向"
  topic_other:
  description: |-
    2015年2月現在、ARTのコードは日々更新されています。
    KitKatの時代からのARTのコードの進化とDalvik仮想マシンとの違いについて発表します。AOTコンパイラとGC、できればJNIについて話そうと思っています。

- title: "JellyBeanとKitKatで実現するマテリアルデザイン"
  speaker: "androhi"
  time: "25分"
  topic: "デザイン・UI"
  topic_other:
  description: |-
    Android5.0から採用されたマテリアルデザインですが、Android5.xとAndroid4.xで同じように実装することが出来ません。原因としては、Android5.xからしか使えないAPIやAttributesが多く存在し、それがマテリアルデザインの実装の根幹に関わっているためです。後方互換としてSupportLibraryを使用することで、ToolbarやRecyclerView/CardViewといった代表的なUIは、ほぼ同じように使えるようになっています。
    ところが、マテリアルデザインのガイドラインを参考にアプリを開発していくと、様々なUIでカスタマイズが必要になってきます。とりわけAndroid4.x(JellyBean/KitKat)では、それが顕著に現れます。
    セッションでは、それらをどうのように実現するのか実例を交えて紹介することで、これからマテリアルデザインを取り入れたいと考えている開発者の方に、実装のイメージやコスト感を得る参考になるような内容を考えています。

- title: "Material Designを取り入れたデザインリニューアル"
  speaker: "ninjinkun, yuki930"
  time: "50分"
  topic: "デザイン・UI"
  topic_other:
  description: |-
    フリマアプリFrilのデザインリニューアル（Google Play Best App 2014受賞）を事例として、Material Designをどのようにアプリに組み込むかについて、デザイナーとエンジニア両名で発表します。以下のトピックについてお話しする予定です。

    - プロトタイピング
    - ユーザーテスト
    - Material Designガイドラインに準拠した箇所と、あえて破っている箇所
    - 日本語のアプリでMaterial Designをどう見せるか
    - アイコンの設計
    - 配色の設計
    - ActivityとFragmentの分離
    - タブレット対応
    - Scroll to fullscreen
    - 5.0と4.4以下のMaterial Design実装の違い
    - 使っているライブラリの紹介

- title: "デザイナーがXMLを書くことでできる改善しやすいアプリ開発"
  speaker: "@yulily100"
  time: "25分"
  topic: "デザイン・UI"
  topic_other:
  description: |-
    アプリの開発時、デザイナーとのやりとりをどのように行っているでしょうか？
    おそらくグラフィックツールで作成したスクリーンショットをやりとりしていることが多いと思います。
    一方、わたしがデザイナーを務めているプロジェクトでは、スクリーンショットのやりとりは行なっていません。では、どのように開発しているかというと、デザイナーがレイアウトファイルに直接XMLを書くというスタイルを取っています。
    この方法には、従来のスクリーンショットをやりとりする方法と比べ、良い点がたくさんあります。
    今回のセッションでは、具体的にこの開発フローを使うとどのように良いのかと、
    どのようにしたらXML未経験のデザイナーが３ヶ月でコーディングできるようになるかを、
    material design対応の事例を用いながら紹介します。

    【対象者】
    - いまの開発方法がなんとなくうまくいっていない、またはほかの方法を試してみたいエンジニア、デザイナー
    - ふだんデザイナーがどのようなことを考えながらアプリのデザインをしているか聞いてみたいエンジニア

- title: "Bitmapは怖くない。"
  speaker: "wasabeef_jp"
  time: "25分"
  topic: "ハードウェア"
  topic_other:
  description: |-
    ■ 対象者
     エンジニア中級者〜上級者

    ■ 概要
     近年、アプリで表示しなければいけない画像のサイズは増え続けています。
     それでもAndroidエンジニアは、少ないinメモリ資源を節約しながら開発しなければなりません。
     「PicassoやGlideを使えば、そこまで意識しなくても大丈夫」とは言いがたい世の中です。
     時には、デザイナーからBlurをかけたいと言われ、時には、簡単なFilterで被せて欲しいと言われ画像に対しての知識は、必須と言っても過言ではありません。
     それを皆さんと一緒に振り返りながら、実はこんなテクニックもある。というところを発表したいと思います。

     話す事
     * Bitmapとは？
     * Bitmap.Configとは？
     * Picasso and Glideが出来る事
     * Picasso and Glideが出来ないことを補填するLibraryの紹介
     * BitmapShaderで出来る事
     * ColorFilterで出来る事
     * RenderScriptで出来る事
     * GPUImage for Androidの簡単な紹介

- title: "モバイルにおける電力最適化のための1プラクティス"
  speaker: "Ohoooo"
  time: "25分"
  topic: "ハードウェア"
  topic_other:
  description: |-
    AndroidWearなどの電力を考慮した開発が必要だったり、長く遊んでもらうために電力消費を少なくしたいゲーム開発者に向けたないようになります。
    Androidなどのモバイル端末において、電力消費を簡単かつ安価（数千円）に数十msの時間解像度でモニタリングするために、電力計とArduinoを組み合わせた計測装置を作成。
    その計測装置を用いて、様々なゲームアプリの電力消費の傾向を調査した結果と、プログラム内の電力を食う部分を最適化するために何ができるかのプラクティスの紹介をします。

- title: "ゲームアプリケーションのアップデートサイクル"
  speaker: "@iizukak"
  time: "25分"
  topic: "メンテナンス"
  topic_other:
  description: |-
    「いかにして開発するか」も重要ですが，「いかにして運用するか」も同様に重要な課題です．数百万人規模のユーザを抱えるゲームアプリの運用を担当するエンジニアが，アプリのアップデートサイクルの実状をお話します．
    アップデートのためのスケジュールは？　いかにして障害を防ぐのか？　コードレビューは？　テストは？　アプリのクラッシュをどう把握するか？　レガシーOSを切り捨てられるのか？
    日頃あまり明かされない「運営」の舞台裏をちらっとお見せしたいと思います．

- title: "アプリの企画、プロトタイプからリリースに至るまで"
  speaker: "@__chocomelon"
  time: "25分"
  topic: "メンテナンス"
  topic_other:
  description: |-
    アプリを企画、リリースに至るまでの話をします。
    エンジニアが中心となってブレインストーミングから始め、その後のプロトタイプ、本番コードの実装、リリースに至るまでに得られたアプリ開発の知見を共有します。
    ブレインストーミング、プロトタイプ、フィードバッグなどの重要性を得られた体験から話します。

    ■企画からリリースまでのプロセス概要
    * ブレインストーミング
    エンジニア2人とディレクター1人のブレインストーミングから始めました。
    ここでサービスについての自社競合含めた調査なども行いました。

    * アプリの売りを考える
    自分たちのアプリが他のアプリと比べてアドバンテージとなるポイントを考えるために、ストアでの掲載文を考えました。
    ストアの掲載文は短い文章でアプリの売りを説明するため、アプリの軸となる機能やポイントを抑えるのに効果的でした。

    * プロトタイピング
    プロトタイプはAndroidで行い、プロトタイプのコードは本番では一切使わないことを前提にすることでスピード感を出したり、社内で知見がなかった技術検証を行いました。

    * フィードバック
    アプリの重要である機能の洗い出しや再確認のために社内の別チームのメンバーにも声をかけて頻繁にプロトタイプのアプリを触る機会を作りました。

    * 本実装
    本実装ではプロトタイプの知見をもとに、必要なメンバーを揃えて0からコーディングを行いました。
    本実装はリリース予定日の2週間以上前に完了していること目標にしました。

    * リリース
    まだリリース間もないためこの辺りは当日詳しく共有できたらと思います。

- title: "アプリを公開する前に、最低限知っておきたいセキュリティ事項"
  speaker: "Gaku Taniguchi"
  time: "50分"
  topic: "メンテナンス"
  topic_other:
  description: |-
    セキュリティホールがあるアプリケーションをを作らないようにするために、やりがちな例をあげながら、その対応策について解説致します。
    また、不正のないアプリがマルウェアに間違われる事、他人の作成したライブラリを使用したために、意図せずマルウェアになってしまう事もあります。
    個人情報の取扱い等、知っているだけで防げる例が数多く存在します。

    アプリを公開する人に最低限知ってもらいセキュリティに関する事項をお話します。

- title: "ゲームアプリケーションのアップデートサイクル"
  speaker: "@iizukak"
  time: "25分"
  topic: "メンテナンス"
  topic_other:
  description: |-
    ■概要
    数百万人規模のユーザを抱えるゲームアプリの開発・アップデートを担当するエンジニアが，アプリのアップデートサイクルの実際をお話します．

    ■想定対象者
    ・ゲームアプリの運用・開発に興味のある方

    ■詳細
    ゲームアプリでは「いかにして開発するか」も重要ですが，「いかにして運用するか」も同様に重要な課題です．

    アプリのアップデートを実施するためには，実に多くのことを考える必要があります．一例を挙げれば，
    ・アップデートのための全体スケジュールはどうするか？
    ・コードレビューの体制はどうするか？
    ・いかにして障害を防ぐのか？
    ・どの規模でテストを行えばよいのか？
    ・アプリリリース後，ユーザの手元で起こってしまったクラッシュをどう把握するか？
    ・レガシーOSを切り捨ててよいのだろうか？
    私達は日々このような課題に対して，技術的・チームコミュニケーション的側面から解決を試みようとアプローチしています．そしてその中で，多くの Tips を見出してきました．そのような Tips を，今回はざっくばらんに紹介したいと思います．

    今回お話する内容は，ゲームの開発者はもちろんのこと，日頃ゲームで遊んでいて，運営がどのようになっているのか興味のある皆さんにも面白いと思っていただける内容にしたいと思っています．

    日頃あまり明かされない「運営」の舞台裏をちょっとだけ見てみませんか？

- title: "開発を効率的に進めるられるまでの道程"
  speaker: "@cattaka_net"
  time: "25分"
  topic: "メンテナンス"
  topic_other:
  description: |-
    ■概要
    Androidアプリケーション開発でテストコードが無い状態から書き始めるまでにどのようなことを行うかをお話しします。
    Androidアプリケーション開発では様々なツールや仕組みを使うことができます。JUnitでテストコードを書けることはもちろんのこと、UIテストを便利にするEspresso、JVMでのテストの実行を可能にするRobolectricなど便利なツールやライブラリがあり、これらを使わない手はありません。そしてテストコードがあればJenkins等でCIを使い、開発をより効率的に進められるようになります。
    しかしながら、テストコードを書くことはCIを使った自動化による開発効率の向上の第一歩でありながら最初の壁となっています。これはテストコードを書きながら成長したプロダクトはともかく、後からテストコードを書くことは非常に困難だからです。
    テストコードを書くには残念ながらプロダクトのコードにある程度の配慮が必要になります。このため後からテストコードを書くときには様々なリファクタリングが必要になります。それらの対象は通信処理、データベース、プリファレンスなど様々で、ときにはコードの大きな構造変更が必要になる事もあります。
    このような問題について、どのようにすれば後からユニットテストを書くことが巧くいくのか、経験を元にそれらアプローチ方法を紹介します。

    ■対象者
    テストコードを書きたい初級〜中級のアプリ開発者

- title: "絶対落ちないアプリの作り方"
  speaker: "白山　文彦"
  time: "25分"
  topic: "メンテナンス"
  topic_other:
  description: |-
    なぜあなたのAndroidアプリはクラッシュするのでしょうか。Androidで最も重要な概念はライフサイクルと非同期処理に関する厳密な理解です。何を当たり前のことをと言われそうですが、実に多くの方がこのことを本当に理解しているのか疑わしいコードを書いてしまいます。
    ActivityやFragmentのライフサイクルと陥りやすい罠、よく利用される非同期処理ライブラリであるAsyncTaskとLoaderの違いと使いどころ、Serviceからのコールバックなどを通じて、いくつかのタブーを犯さないようにするとアプリは驚くほど安定します。
    非同期処理のコールバックでFragmentTransactionを伴う処理でのクラッシュなど、Android開発者が1度は陥ったことのあると思われる実例を挙げながら、クラッシュしづらいAndroidアプリについて考察します。

- title: "大容量データのダウンロード戦略"
  speaker: "@misyobun"
  time: "25分"
  topic: "メンテナンス"
  topic_other:
  description: |-
    みなさんは、アプリから大容量のデータをダウンロードする際どのように実現しているでしょうか？
    まず最初に思い浮かべるのはDownloadManagerの利用かと思います。
    DownloadManagerはバッググランドでの長大なダウンロード処理や通信環境の変化に対応した処理のハンドリング、そして接続が切断された場合のリトライなどを少ない実装コストで実現することができて大変便利です。
    しかし、開発するアプリの仕様によっては、どうしてもDownloadManagerでは実現できないという場合が往々にしてあります。
    本セッションではDownloadManagerを使えないアプリの仕様を例に挙げ、どのようにしてその仕様に合わせて大容量データのダウンロードを実現していくか、実際のコードを交えながらお話しします。

- title: "Andorid学ぶ君へ。生き抜くためのナレッジ共有"
  speaker: "岡野 忍(@operandoOS)"
  time: "25分"
  topic: "その他"
  topic_other: "初心者・ナレッジ共有"
  description: |-
    対象者 : 初心者から中級者、どのようにAndroidの情報収集してるのか気になる人

    概要 : Android開発をしてきて得られたナレッジを紹介

    開発する上で悩みの種となる、設計、実装からデザインまで幅広く、3年間のナレッジから解決作・工夫点などを紹介。
    色んなAndroid開発者から提供していただいたナレッジも紹介。

    * どのようにAndoridを学んできてのか
    * 今どのように学んでいるのか
    * 最新動向はどのように学ぶか
    * 開発に役に立つ情報はどこで手に入れるか
    * 開発効率を向上させる方法
    * 実開発であったAndroidあるある話
    * 日本でAndroidのことならこの人に聞け！
    * AndoridにかかせないJavaを学ぶ上での役に立つTips

    これからAndorid開発を学ぶ人・もう開発してる人に
    さらにAndroidに興味を持ってもらうため
    Androidの内部構造を知る一歩を踏み出す方法も紹介。

- title: "CardboardのUXをカメラで向上する"
  speaker: "高橋憲一"
  time: "25分"
  topic: "その他"
  topic_other: "VR"
  description: |-
    Cardboard SDK と OpenCV を使って、指で中のものを動かせるVRを実現するお話しです。
    Cardboard を使うとAndroid端末で手軽にVRの世界を実現出来ますが、せっかく端末にはタッチパネルがあるのにそこが触れなくなってUXが損なわれるのがイマイチだなと思っておりました。マグネットのスイッチが付いてはいるものの何かのトリガー程度にしか使えません。しかし、Cardboard のカメラが当たる部分は「どうぞ使ってください」と言わんばかりにくり抜かれています。そこでカメラの前に指をかざしてVRの中にあるオブジェクトを操作できないかと考えて奮闘した記録をお話ししたいと思います。

- title: "タイトル未定（Fragmentではまらないためのあれこれ）"
  speaker: "あんざいゆき"
  time: "50分"
  topic: "基調講演"
  topic_other: "開発テクニック"
  description: |-
    正しく使えば便利なFragmentですが、落とし穴もたくさんあります。
    どういうところで利用すればいいのか。どのようにFragmentを利用すればはまらないのか。
    Master of Fragment（http://tatsu-zine.com/books/master-of-fragments）
    にまだ書かれていない情報も含めて Fragment 利用時のあれこれを紹介します。
